Текст для презентации (черновик в тетрадке)

::Титульный слайд::
Добрый день,
Меня зовут Андрей Лушников, я студент 545 группы кафедры системного
программирования, и сегодня я хочу рассказать Вам о моей дипломной работе.

::Какие-нибудь факты про пластическую хирургию::
Начать свой доклад я хочу с небольшого введения в предметную область -
имитация пластических операций. Это достаточно молодое направление, которое
пытается применить высокие технологии для демонстрации клиентам клиник
пластической хирургии ожидаемых результатов от той или иной процедуры.

::Слайд про виды имитации::
Имитацию пластических операций осуществляют либо в 2D, либо в 3D. В
первом случае результаты демонстрируются на основе фотографии клиента, во втором
же используется трехмерная модель. Понятно, что имитация операций в 3D гораздо
более трудоемка, зато результат можно покрутить и рассмотреть со всех сторон.

Наиболее значительные результаты можно получить, если использовать одновременно
и 3D имитацию, и 2D имитацию, которая необходима для ретуширования текстуры
трехмерной модели. Я в своей дипломной работе занимался трехмерной имитацией
пластических операций, а о двумерной имитации Вам раскажет сразу после меня
Добролеж Анна.

::Слайд про предметную область::
Команда, в составе которой я выполнял данную дипломную работу, занимается
прогнозированием уже более 5 (???) лет. Ею были разработаны и успешно внедрены
специализированные библиотеки и основанные на них desktop-приложения,
позволяющие наглядно и правдоподобно имитировать операции по
пластической хирургии. Однако разработанные приложения помимо своих достоинств
обладают серией недостатков, присущих всему классу desktop-приложений: их
тяжело переносить на новые платформы, сложно поддерживать, и кроме того они
достаточно требовательны к аппаратному и программному обеспечению.

::Слайд про мотивацию::
Эти проблемы послужили потивацией для данной дипломной работы. Понятно, что
web-приложения лишены вышеуказанных проблем, однако вместо этих проблем
возникает проблема взаимодействия с legacy-кодом, а именно с теми библиотеками,
разработанными за прошлые годы работы.

::Постановка задачи::
Итак, задача была поставлена следующим образом: необходимо разработать
графический редактор, работающий в браузере, с возможностью просмотра и
изменения геометрии трехмерных моделей. Кроме этого необходимо разработать
технологию, которая решила бы вопрос интеграции legacy-кода с новым редактором,
а значит позволила бы использовать в нем наработки прошлых лет.

::Постановка задачи - OBJ::
Дополнительным требованием к функциональности редактора была поддержка файлов
формата WaveFront Object. Wavefront object - это открытый
формат для хранения трехмерных моделей. Это дополнительное требование обосновано
широким растространением и частым использованием производителями трехмерных фотокамер

::Демо::Теперь я хотел бы прежде всего продемострировать Вам разработанное приложение
Теперь я хотел бы прежде всего продемострировать Вам достигнутый результат.

---ДЕМО---
Видио? Скринкаст? Я за второе! :D

::Технологии::
Прежде чем углубляться в детали, давайте разберемся с основополагающей
структурой приложения. Перед нами классическое клиент-серверное web-приложение,
взаимодействующее по средствам протокола HTTP. Клиентская часть
ответственна за просмотр и редактирование трехмерной модели, в чем ей помогают
технология WebGL, предоставляющая API очень похожий на OpenGL ES для
использовании в браузере, а так же фреймворк Three.js, предоставляющий
высокоуровневую абстракию над примитивами WebGL.

Серверная часть реализована на платформе Node.js с использованием фреймворка
Express.js, который значительно облегчает разработку web-приложений.
А вот функции, которые ложатся на серверную часть, мы рассмотрим более подробно.

::Поддержка OBJ-формата::
Первое применение серверная часть приложения нашла при реализации поддержки
OBJ-файлов, что являлось одним из требований к функциональности редактора.
Для того, чтобы загрузить модель в формате OBJ в фреймворк Three.js для
дальнейшего рендеренга, она сначала должна быть преобразована в специальный
внутренний формат. Для осуществления такого преобразования разработчики
фреймворка предоставили скрипт, написанный на языке python.

::Динамическая конвертация::
Таким образом модель в формате OBJ, загружакмая пользователем со своего
локального компьютера, отправляется на сервер, где сразу же перекодируется в
необходимый формат и становится доступной для загрузки в редактор.

::Legacy-код::
Теперь я хочу рассказать о том, каким же образом была организована поддержка
legacy-кода в разрабатываемом редакторе. Прежде всего, я хотел бы еще раз
подчеркнуть, с чем мы работаем. Это серия алгоритмов для обработки геометрии,
написанные на языке С++, возраст которых уже достаточно солидный - 6 лет.
Этот код необходимо интегрировать с клиент-серверным веб-приложением, серверная
часть которого работает на платформе Node.js, а геометрия, которую нужно
обработать, находится в браузере на стороне клиента. Организовать такое
взаимодействие представляется довольно естественным следующим образом

::Решение::
Схема достаточно простая: при необходимости применить какую-нибудь функцию,
определенную в старом фонде, клиент передает геометрию на web-сервер, который, в
свою очередь, передает ее на исполнение соответствующей функции legacy-кода.

::Решение-1, 2, 3::
Заметим, что взаимодействия между веб-сервером и legacy-кодом требуют наличия
пары сериализатор/десериализатор у каждого из участников взаимодействия, а кроме
того необходим некоторый общий транспортный уровень. Все это можно
реализовать и главное поддерживать самостоятельно, что обещает быть довольно
трудоемким и ошибкоопасным процессом. Вместо этого было решено применить
технологию Apache Thrift, которая по предварительному описанию генерирует
все необходимые модули.

::Тонкое место::
Такая архитектура обеспечила нам поддержку legacy-кода и заодно дала нам
гипотетическую возможность писать фильтры для геометрии на любом из 20
поддерживаемых технологией Apache Thrift языков. Вместе с тем ее узким местом
стало быстродействие из-за больших объемов передачи данных по сети между
клиентом и сервером.

Выделенные цветами стрелки передают между собой данные одного формата: это
некоторое представление модели. Синяя стрелка, идущая от сервера в направлении
клиента, переносит сжатые с помощью gzip данные, что легко поддерживается
протоколом HTTP, серверами и браузерами, в то время как стрелочка от клиента к
серверу не использует никакого аппаратно поддерживаемого алгоритма сжатия
данных, т.к. такой поддержки на данный момент просто нет. Были проведены
эксперименты по использованию сжатия LWZ, реализованного на языке JavaScript,
что несколько улучшило положение дел.

Наибольший же прогресс был достигнут при почти полном отказе от этого типа
взаимодействия.

::Зеркалирование::
Новый подход удобно показать на примере.
Допустим, пользователь делает несколько преобразований над моделью, после чего хочет
вызвать какую-нибудь функцию из библиотеки унаследованного кода. Так как все
преобразования детерменированны, не имеют внешних эффектов и полностью
определяются своими начальными параметрами, то вместо того,
чтобы отправлять всю модель, будем отправлять только параметры
сделанных преобразований, а на стороне сервера имитировать эти преобразования.

::Сложности::
Обычно зеркалирование очень трудоемко для реализации и
сопровождения и сильно увеличивает затраты на разработку нового функционала,
однако в данном случае оно достается практически бесплатно вместе с платформой
Node.js. Изначальная загрузка модели, которая хранится в недокументированным
формате фреймворка Three.js, возможна с помощью исполнения кода фреймворка
Three.js на стороне сервера, а любой новый разработанный алгоритм деформирования
без каких-либо изменений может быть выполнен как на стороне сервера, так и на
стороне клиента.


